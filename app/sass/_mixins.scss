/// bar-gradient
/// -----------------------------------------------
/// creates gradient with color stops at 50% to create a hard split
/// @param {Color} $from - the start color
/// @param {Color} $to - the end color
@mixin bar-gradient($from, $to) {
  background: linear-gradient(to bottom, $from 0%, $from 50%, $to 50%, $to 100%);
}

/// state-font-shadow
/// -----------------------------------------------
/// creates the text shadow for the state font abbreviation
/// @param {Color} $color - the color of the shadow
@mixin state-font-shadow($color) {
  text-shadow: .01em .02em 0 $color;
}

/// px to em conversion
/// -----------------------------------------------
/// @param {Number} $pixels - the pixel size we are converting
/// @param {Number} $content [$font-size-base] - the content for figuring out the em
///   defaults to the bootstrap font size base
@function em($pixels, $context: $font-size-base) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return $pixels / $context * 1em;
}


/// Triangle helper
/// -----------------------------------------------
/// @param {Direction} $direction - Triangle direction, either `top`, `right`, `bottom` or `left`
/// @param {Color} $color [currentcolor] - Triangle color
/// @param {Length} $size [1em] - Triangle size
@mixin triangle($direction, $color: currentcolor, $size: 1em) {
  @if not index(top right bottom left, $direction) {
    @error "Direction must be either `top`, `right`, `bottom` or `left`.";
  }

  width: 0;
  height: 0;
  content: '';
  z-index: 2;
  border-#{opposite-direction($direction)}: ($size * 1.25) solid $color;

  $perpendicular-borders: $size solid transparent;

  @if $direction == top or $direction == bottom {
    border-left:   $perpendicular-borders;
    border-right:  $perpendicular-borders;
  } @else if $direction == right or $direction == left {
    border-bottom: $perpendicular-borders;
    border-top:    $perpendicular-borders;
  }
}

/// opposite-direction
/// -----------------------------------------------
/// Returns the opposite direction of each direction in a list
/// @author Hugo Giraudel
/// @param {List} $directions - List of initial directions
/// @return {List} - List of opposite directions
@function opposite-direction($directions) {
  $opposite-directions: ();
  $direction-map: (
          'top':    'bottom',
          'right':  'left',
          'bottom': 'top',
          'left':   'right',
          'center': 'center',
          'ltr':    'rtl',
          'rtl':    'ltr'
  );

  @each $direction in $directions {
    $direction: to-lower-case($direction);

    @if map-has-key($direction-map, $direction) {
      $opposite-directions: append($opposite-directions, unquote(map-get($direction-map, $direction)));
    } @else {
      @warn "No opposite direction can be found for `#{$direction}`. Direction omitted.";
    }
  }

  @return $opposite-directions;
}


/// state-font
/// -----------------------------------------------
/// sets the font to be the state ligatures font
@mixin state-font() {
  font-family: 'PT States Narrow', $font-family-sans-serif;
  font-variant-ligatures: normal;
}